@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager

<ul class="navbar-nav">
    @if (SignInManager.IsSignedIn(User))
    {
        // Obtener el usuario de forma sincrónica
        IdentityUser myidentity = UserManager.GetUserAsync(User).Result;
        var roles = UserManager.GetRolesAsync(myidentity).Result;

        @if (roles.Contains("Admin") || roles.Contains("Operador"))
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="" asp-controller="Admin" asp-action="Index">Casos registrados</a>
            </li>
        }
        @if (roles.Contains("User") || roles.Contains("Operador"))
        {
            <li class="nav-item">
                <a class="nav-link text-dark" asp-area="" asp-controller="Formulario" asp-action="Index2">Casos</a>
            </li>
        }
        
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">Hello
                @User.Identity?.Name!</a>
        </li>
        <li class="nav-item">
            <!-- Formulario de logout -->
            <form class="form-inline" method="post" asp-area="Identity" asp-page="/Account/Logout">
                <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
            </form>
        </li>
    }
    else
    {
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Register">Register</a>
        </li>
        <li class="nav-item">
            <a class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Login">Login</a>
        </li>
    }
</ul>
