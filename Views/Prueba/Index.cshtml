@{
    ViewBag.Title = "Crear Diagrama";
}

<h2>Crear Diagrama</h2>

<!-- Div para el Diagrama -->
<div id="myDiagramDiv" style="width:100%; height:600px; border:1px solid black;"></div>

<!-- Div para la Paleta (herramientas de arrastrar y soltar) -->
<div id="paletteDiv" style="width:1000px; height:100px; border:1px solid black; float:left;"></div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/gojs/2.1.40/go.js"></script>

<script>
    var $ = go.GraphObject.make;  // Inicializa GoJS

    // Configura el Diagrama
    var diagram = $(go.Diagram, "myDiagramDiv", {
        "undoManager.isEnabled": true,  // habilita Ctrl-Z para deshacer y Ctrl-Y para rehacer
        "linkingTool.direction": go.LinkingTool.ForwardsOnly,  // Permite solo enlaces hacia adelante
        "linkingTool.isEnabled": true,  // Habilita la creación de enlaces
        "linkReshapingTool.isEnabled": true,  // Permite mover las líneas y ajustar su forma
        "draggingTool.isEnabled": true,  // Habilita el arrastre de nodos
        "dragSelectingTool.isEnabled": true,  // Permite seleccionar múltiples nodos arrastrando
        "clickSelectingTool.standardMouseSelect": function() {  // Personaliza la selección
            var diagram = this.diagram;
            if (diagram === null) return;
            var e = diagram.lastInput;
            if (e.left && !(e.control || e.meta) && !e.shift) {
                var part = diagram.findPartAt(e.documentPoint, false);
                if (part !== null) {
                    diagram.select(part);
                    if (part instanceof go.Node) {
                        part.movable = true;  // Hace el nodo movible al seleccionarlo
                    }
                } else {
                    diagram.clearSelection();
                }
            }
        }
    });

    // Define las plantillas de nodo (nodos que se pueden arrastrar)
    diagram.nodeTemplate =
      $(go.Node, "Auto",  // Nodo automático con forma y texto
        { 
          fromLinkable: true, 
          toLinkable: true, 
          cursor: "pointer",  // Cambia el cursor a 'pointer' por defecto
          locationSpot: go.Spot.Center,  // Centra el nodo en el punto donde se suelta
          movable: false,  // Inicialmente, el nodo no es movible
          selectionAdorned: true,  // Muestra un adorno cuando se selecciona
          selectionAdornmentTemplate:  // Define el adorno de selección
            $(go.Adornment, "Auto",
              $(go.Shape, { fill: null, stroke: "blue", strokeWidth: 2 }),
              $(go.Placeholder)
            )
        },
        new go.Binding("movable", "isSelected").makeTwoWay(),  // Vincula la propiedad movable con isSelected
        $(go.Shape,  // Define la forma del nodo
          {
            fill: "white", strokeWidth: 2,  // Color y grosor del borde
            stretch: go.GraphObject.Fill  // Permite que la figura crezca según el tamaño del texto
          },
          new go.Binding("figure", "figure"),  // Binding para la forma (rombo, elipse, etc.)
          new go.Binding("fill", "color")),  // Binding para cambiar el color
        $(go.TextBlock, 
          {
            margin: 10,  // Espacio alrededor del texto
            editable: true,  // Permite la edición del texto
            wrap: go.TextBlock.WrapFit,  // Ajusta el texto para que se ajuste al nodo
            textAlign: "center",  // Centra el texto dentro del nodo
            font: "bold 12pt sans-serif",  // Define el estilo del texto
            minSize: new go.Size(100, NaN)  // Define un tamaño mínimo para las figuras
          },
          new go.Binding("text", "key").makeTwoWay())  // Binding para el texto editable
      );

    // Define las conexiones (líneas) entre los nodos
    diagram.linkTemplate =
      $(go.Link,
        { routing: go.Link.AvoidsNodes, curve: go.Link.JumpOver, corner: 5 },  // Configura la línea
        $(go.Shape),  // La línea que conecta los nodos
        $(go.Shape, { toArrow: "OpenTriangle" })  // Flecha al final de la línea
      );

    // Configuración para la paleta (arrastrar y soltar)
    var palette = $(go.Palette, "paletteDiv");  // Define la paleta de herramientas
    palette.nodeTemplate = diagram.nodeTemplate;

    // Agrega nodos a la paleta para arrastrar y soltar con diferentes figuras
    palette.model.nodeDataArray = [
      { key: "Proceso", figure: "RoundedRectangle", color: "lightblue" },
      { key: "Decisión", figure: "Diamond", color: "lightgreen" },
      { key: "Resultado", figure: "Ellipse", color: "lightyellow" },
      { key: "Hexágono", figure: "Hexagon", color: "lightcoral" }  // Agrega un hexágono
    ];

    // Define un modelo vacío para el diagrama (sin nodos iniciales)
    diagram.model = new go.GraphLinksModel([], []);

    // Evento para manejar la selección y deselección de nodos
    diagram.addDiagramListener("ChangedSelection", function(e) {
        var diagram = e.diagram;
        diagram.selection.each(function(part) {
            if (part instanceof go.Node) {
                part.movable = true;
            }
        });
        diagram.nodes.each(function(node) {
            if (!node.isSelected) {
                node.movable = false;
            }
        });
    });
</script>