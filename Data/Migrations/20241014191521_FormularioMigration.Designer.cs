// <auto-generated />
using System;
using FORMULARIOCENSI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FORMULARIOCENSI.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241014191521_FormularioMigration")]
    partial class FormularioMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FORMULARIOCENSI.Models.Formulario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Abdomen")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abdomen");

                    b.Property<string>("Actuar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("actuar");

                    b.Property<string>("AparatoLocomotor")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aparato_locomotor");

                    b.Property<string>("Aplicar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aplicar");

                    b.Property<string>("Aprendizaje")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("aprendizaje");

                    b.Property<string>("Autores")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("autores");

                    b.Property<string>("Base")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base");

                    b.Property<string>("Baseline")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("baseline");

                    b.Property<string>("Bibliografía")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("bibliografía");

                    b.Property<string>("Cardiovascular")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cardiovascular");

                    b.Property<string>("CompetenciaGeneral")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("competencia_general");

                    b.Property<string>("Confederado")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("confederado");

                    b.Property<string>("Control")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("control");

                    b.Property<string>("Cuello")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cuello");

                    b.Property<string>("DatosPaciente")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DatosPaciente");

                    b.Property<string>("Definiciones")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("definiciones");

                    b.Property<string>("Discriminar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("discriminar");

                    b.Property<string>("Distinguir")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("distinguir");

                    b.Property<string>("Endovenoso")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("endovenoso");

                    b.Property<string>("Enfoque")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("enfoque");

                    b.Property<string>("Equipos")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("equipos");

                    b.Property<string>("Escenarios")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("escenarios");

                    b.Property<string>("Estado1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado1");

                    b.Property<string>("Estado1Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado1_desem");

                    b.Property<string>("Estado2")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado2");

                    b.Property<string>("Estado2Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado2_desem");

                    b.Property<string>("Estado3")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado3");

                    b.Property<string>("Estado3Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado3_desem");

                    b.Property<string>("Estado4")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado4");

                    b.Property<string>("Estado4Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado4_desem");

                    b.Property<string>("Estado5")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado5");

                    b.Property<string>("Estado5Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado5_desem");

                    b.Property<string>("Estado6")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado6");

                    b.Property<string>("Estado6Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado6_desem");

                    b.Property<string>("Estado7")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado7");

                    b.Property<string>("Estado7Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado7_desem");

                    b.Property<string>("Estado8Desem")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado8_desem");

                    b.Property<string>("EstadoGeneral")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("estado_general");

                    b.Property<string>("GenitoUrinario")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("genito_urinario");

                    b.Property<string>("Herramientas")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("herramientas");

                    b.Property<string>("HistoriaClinica")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("historia_clinica");

                    b.Property<string>("Identificar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("identificar");

                    b.Property<string>("Laboratorios")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("laboratorios");

                    b.Property<string>("MedidasEsenciales")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Medidas_esenciales");

                    b.Property<string>("MonitorDesfibrilador")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("monitor_desfibrilador");

                    b.Property<string>("Neurologico")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("neurologico");

                    b.Property<string>("NotaHospitalizacion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nota_hospitalizacion");

                    b.Property<string>("Objetivos")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("objetivos");

                    b.Property<string>("Ordenes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ordenes");

                    b.Property<string>("Piel")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("piel");

                    b.Property<string>("Preguntas")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("preguntas");

                    b.Property<string>("PuntosDebriefing")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("puntos_debriefing");

                    b.Property<string>("Recomendaciones")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("recomendaciones");

                    b.Property<string>("Referencias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("referencias");

                    b.Property<string>("Respiratorio")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("respiratorio");

                    b.Property<string>("SignosVitales")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("signos_vitales");

                    b.Property<string>("Sinopsis")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sinopsis");

                    b.Property<string>("SituaciónTriaje")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("situacion_triaje");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulo");

                    b.Property<string>("Usar")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("usar");

                    b.HasKey("Id");

                    b.ToTable("t_formulario");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
